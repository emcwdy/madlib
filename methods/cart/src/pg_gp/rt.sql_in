/* ----------------------------------------------------------------------- *//**
*
* @file rt.sql_in
*
* @brief Functions used in Rregression tree for data training, prediction and scoring.

* @create    September 26, 2012
* @modified  
*
*//* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4')

/* Own macro definitions */
m4_ifelse(
    m4_eval(
        m4_ifdef(`__GREENPLUM__', 1, 0) &&
        __DBMS_VERSION_MAJOR__ * 100 + __DBMS_VERSION_MINOR__ < 401
    ), 1,
    `m4_define(`__GREENPLUM_PRE_4_1__')'
)
m4_ifelse(
    m4_eval(
        m4_ifdef(`__POSTGRESQL__', 1, 0) &&
        __DBMS_VERSION_MAJOR__ < 9
    ), 1,
    `m4_define(`__POSTGRESQL_PRE_9_0__')'
)

m4_ifelse(
    m4_eval(
        m4_ifdef(`__GREENPLUM__', 1, 0) &&
        __DBMS_VERSION_MAJOR__ * 10000 +  
        __DBMS_VERSION_MINOR__ * 100 +
        __DBMS_VERSION_PATCH__ >= 40201
    ), 1,
    `m4_define(`__GREENPLUM_GE_4_2_1__')'
)

/*
 * @brief The type is returned by Function rt_train.
 *
 * @param num_of_samples    
 * @param tree_nodes        
 * @param tree_depth        
 * @param training_time     
 */
DROP TYPE IF EXISTS MADLIB_SCHEMA.rt_train_result CASCADE;
CREATE TYPE MADLIB_SCHEMA.rt_train_result AS
    (
        num_of_samples      INT,
        tree_nodes          INT,
        tree_depth          INT,
        training_time       INTERVAL
    );

/*
 * @brief Remove the trained tree from training info table.
 *
 * @param tree_table    The full name of the tree table.
 *
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.rt_train
    (
    rt_type                     TEXT,
    training_table_name         TEXT,
    result_tree_table_name      TEXT,
    validation_table_name       TEXT,
    continuous_feature_names    TEXT,
    feature_col_names           TEXT,
    id_col_name                 TEXT,
    val_col_name                TEXT,
    min_variance_gain           FLOAT,
    how2handle_missing_value    TEXT,
    max_tree_depth              INT,
    min_percent_node            FLOAT,
    min_percent_split           FLOAT,
    verbosity                   INT
    )   
RETURNS MADLIB_SCHEMA.rt_train_result AS $$
    PythonFunctionBodyOnly(`cart', `rt')             
    return rt.__rt_train(MADlibSchema, rt_type, training_table_name, result_tree_table_name, 
        validation_table_name, continuous_feature_names, feature_col_names, id_col_name,
        val_col_name, min_variance_gain, how2handle_missing_value, max_tree_depth, min_percent_node, 
        min_percent_split, verbosity)
$$ LANGUAGE PLPYTHONU;


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.__display_node_sfunc_rt
    (
    state           TEXT,
    depth           INT,
    is_cont         BOOLEAN,
    feat_name       TEXT,
    curr_val        TEXT,
    split_value     FLOAT8,
    predict_val     FLOAT8,
    num_of_samples  INT
    )
RETURNS TEXT AS $$
    PythonFunctionBodyOnly(`cart', `rt')
    return rt.__display_node_sfunc(MADlibSchema, state, depth, is_cont,
        feat_name, curr_val, split_value, predict_val, num_of_samples)
$$ LANGUAGE PLPYTHONU;


DROP AGGREGATE IF EXISTS MADLIB_SCHEMA.__display_tree_aggr_rt
    (
    INT,        -- depth
    BOOLEAN,    -- is_cont
    TEXT,       -- feature name
    TEXT,       -- curr_val
    FLOAT8,     -- split_value
    FLOAT8,     -- predict_val
    INT         -- num_of_samples
    ) CASCADE;
CREATE ORDERED AGGREGATE MADLIB_SCHEMA.__display_tree_aggr_rt
    (
    INT,        -- depth
    BOOLEAN,    -- is_cont
    TEXT,       -- feature name
    TEXT,       -- curr_val
    FLOAT8,     -- split_value
    FLOAT8,     -- predict_val
    INT         -- num_of_samples
    )
(
    SFUNC = MADLIB_SCHEMA.__display_node_sfunc_rt,
    STYPE = TEXT
);


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.rt_display
    (
    rt_table_name           TEXT
    )
RETURNS TEXT AS $$
    PythonFunctionBodyOnly(`cart', `rt')   
    return rt.__rt_display(MADlibSchema, rt_table_name)
$$ LANGUAGE PLPYTHONU;


DROP TYPE IF EXISTS MADLIB_SCHEMA.rt_predict_result CASCADE;
CREATE TYPE MADLIB_SCHEMA.rt_predict_result AS
(
    num_of_samples          BIGINT,
    prediction_time         INTERVAL
);


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.rt_predict
    (
    rt_table_name           TEXT,
    prediction_table_name   TEXT,
    result_table_name       TEXT,
    verbosity               INT
    )
RETURNS MADLIB_SCHEMA.rt_predict_result AS $$
    PythonFunctionBodyOnly(`cart', `rt')
 
    return rt.__rt_predict(MADlibSchema, rt_table_name, prediction_table_name, 
        result_table_name, verbosity)
$$ LANGUAGE PLPYTHONU;


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.rt_clean
    (
    rt_tbl_name             TEXT
    )
RETURNS VOID AS $$
    PythonFunctionBodyOnly(`cart', `rt')
    rt.__rt_clean(MADlibSchema, rt_tbl_name)
$$ LANGUAGE PLPYTHONU;


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.rt_test_housing
    (
    )
RETURNS TEXT AS $$
    PythonFunctionBodyOnly(`cart', `rt')
    plpy.execute("DROP TABLE IF EXISTS trained_tree_rt_communities")
    rt.__rt_train(MADlibSchema, 'const_value', 'communities_train', 'trained_tree_rt_communities',
        None,
        'state,county,community,fold,population,householdsize,racepctblack,racePctWhite,racePctAsian,racePctHisp,agePct12t21,agePct12t29,agePct16t24,agePct65up,numbUrban,pctUrban,medIncome,pctWWage,pctWFarmSelf,pctWInvInc,pctWSocSec,pctWPubAsst,pctWRetire,medFamInc,perCapInc,whitePerCap,blackPerCap,indianPerCap,AsianPerCap,OtherPerCap,HispPerCap,NumUnderPov,PctPopUnderPov,PctLess9thGrade,PctNotHSGrad,PctBSorMore,PctUnemployed,PctEmploy,PctEmplManu,PctEmplProfServ,PctOccupManu,PctOccupMgmtProf,MalePctDivorce,MalePctNevMarr,FemalePctDiv,TotalPctDiv,PersPerFam,PctFam2Par,PctKids2Par,PctYoungKids2Par,PctTeen2Par,PctWorkMomYoungKids,PctWorkMom,NumIlleg,PctIlleg,NumImmig,PctImmigRecent,PctImmigRec5,PctImmigRec8,PctImmigRec10,PctRecentImmig,PctRecImmig5,PctRecImmig8,PctRecImmig10,PctSpeakEnglOnly,PctNotSpeakEnglWell,PctLargHouseFam,PctLargHouseOccup,PersPerOccupHous,PersPerOwnOccHous,PersPerRentOccHous,PctPersOwnOccup,PctPersDenseHous,PctHousLess3BR,MedNumBR,HousVacant,PctHousOccup,PctHousOwnOcc,PctVacantBoarded,PctVacMore6Mos,MedYrHousBuilt,PctHousNoPhone,PctWOFullPlumb,OwnOccLowQuart,OwnOccMedVal,OwnOccHiQuart,RentLowQ,RentMedian,RentHighQ,MedRent,MedRentPctHousInc,MedOwnCostPctInc,MedOwnCostPctIncNoMtg,NumInShelters,NumStreet,PctForeignBorn,PctBornSameState,PctSameHouse85,PctSameCity85,PctSameState85,LemasSwornFT,LemasSwFTPerPop,LemasSwFTFieldOps,LemasSwFTFieldPerPop,LemasTotalReq,LemasTotReqPerPop,PolicReqPerOffic,PolicPerPop,RacialMatchCommPol,PctPolicWhite,PctPolicBlack,PctPolicHisp,PctPolicAsian,PctPolicMinor,OfficAssgnDrugUnits,NumKindsDrugsSeiz,PolicAveOTWorked,LandArea,PopDens,PctUsePubTrans,PolicCars,PolicOperBudg,LemasPctPolicOnPatr,LemasGangUnitDeploy,LemasPctOfficDrugUn,PolicBudgPerPop',
        'state,county,community,communityname,fold,population,householdsize,racepctblack,racePctWhite,racePctAsian,racePctHisp,agePct12t21,agePct12t29,agePct16t24,agePct65up,numbUrban,pctUrban,medIncome,pctWWage,pctWFarmSelf,pctWInvInc,pctWSocSec,pctWPubAsst,pctWRetire,medFamInc,perCapInc,whitePerCap,blackPerCap,indianPerCap,AsianPerCap,OtherPerCap,HispPerCap,NumUnderPov,PctPopUnderPov,PctLess9thGrade,PctNotHSGrad,PctBSorMore,PctUnemployed,PctEmploy,PctEmplManu,PctEmplProfServ,PctOccupManu,PctOccupMgmtProf,MalePctDivorce,MalePctNevMarr,FemalePctDiv,TotalPctDiv,PersPerFam,PctFam2Par,PctKids2Par,PctYoungKids2Par,PctTeen2Par,PctWorkMomYoungKids,PctWorkMom,NumIlleg,PctIlleg,NumImmig,PctImmigRecent,PctImmigRec5,PctImmigRec8,PctImmigRec10,PctRecentImmig,PctRecImmig5,PctRecImmig8,PctRecImmig10,PctSpeakEnglOnly,PctNotSpeakEnglWell,PctLargHouseFam,PctLargHouseOccup,PersPerOccupHous,PersPerOwnOccHous,PersPerRentOccHous,PctPersOwnOccup,PctPersDenseHous,PctHousLess3BR,MedNumBR,HousVacant,PctHousOccup,PctHousOwnOcc,PctVacantBoarded,PctVacMore6Mos,MedYrHousBuilt,PctHousNoPhone,PctWOFullPlumb,OwnOccLowQuart,OwnOccMedVal,OwnOccHiQuart,RentLowQ,RentMedian,RentHighQ,MedRent,MedRentPctHousInc,MedOwnCostPctInc,MedOwnCostPctIncNoMtg,NumInShelters,NumStreet,PctForeignBorn,PctBornSameState,PctSameHouse85,PctSameCity85,PctSameState85,LemasSwornFT,LemasSwFTPerPop,LemasSwFTFieldOps,LemasSwFTFieldPerPop,LemasTotalReq,LemasTotReqPerPop,PolicReqPerOffic,PolicPerPop,RacialMatchCommPol,PctPolicWhite,PctPolicBlack,PctPolicHisp,PctPolicAsian,PctPolicMinor,OfficAssgnDrugUnits,NumKindsDrugsSeiz,PolicAveOTWorked,LandArea,PopDens,PctUsePubTrans,PolicCars,PolicOperBudg,LemasPctPolicOnPatr,LemasGangUnitDeploy,LemasPctOfficDrugUn,PolicBudgPerPop'
        ,'id','ViolentCrimesPerPop', 0, 'explicit', 10, 0, 0, 1)
    #plpy.execute("DROP TABLE IF EXISTS result_predict_rt_communities;")
    #plpy.info('-----------------------------------the predict_error on training set without pruning-------------------------')
    #rt.__rt_predict(MADlibSchema, 'trained_tree_rt_communities', 'communities_train',
    #    'result_predict_rt_communities', 1)
    #plpy.execute("DROP TABLE IF EXISTS result_predict_rt_communities;")
    #plpy.info('-----------------------------------the predict_error on prediction set without pruning-------------------------')
    #rt.__rt_predict(MADlibSchema, 'trained_tree_rt_communities', 'communities_prune',
    #   'result_predict_rt_communities', 1)
    plpy.info(str(rt.__rt_display(MADlibSchema,'trained_tree_rt_communities')))

    plpy.info("-------------post pruning reuslt----------------")
    plpy.execute("DROP TABLE IF EXISTS trained_tree_rt_communities;")
    rt.__rt_train(MADlibSchema, 'const_value', 'communities_train', 'trained_tree_rt_communities',
        'communities_prune', 
        'state,county,community,fold,population,householdsize,racepctblack,racePctWhite,racePctAsian,racePctHisp,agePct12t21,agePct12t29,agePct16t24,agePct65up,numbUrban,pctUrban,medIncome,pctWWage,pctWFarmSelf,pctWInvInc,pctWSocSec,pctWPubAsst,pctWRetire,medFamInc,perCapInc,whitePerCap,blackPerCap,indianPerCap,AsianPerCap,OtherPerCap,HispPerCap,NumUnderPov,PctPopUnderPov,PctLess9thGrade,PctNotHSGrad,PctBSorMore,PctUnemployed,PctEmploy,PctEmplManu,PctEmplProfServ,PctOccupManu,PctOccupMgmtProf,MalePctDivorce,MalePctNevMarr,FemalePctDiv,TotalPctDiv,PersPerFam,PctFam2Par,PctKids2Par,PctYoungKids2Par,PctTeen2Par,PctWorkMomYoungKids,PctWorkMom,NumIlleg,PctIlleg,NumImmig,PctImmigRecent,PctImmigRec5,PctImmigRec8,PctImmigRec10,PctRecentImmig,PctRecImmig5,PctRecImmig8,PctRecImmig10,PctSpeakEnglOnly,PctNotSpeakEnglWell,PctLargHouseFam,PctLargHouseOccup,PersPerOccupHous,PersPerOwnOccHous,PersPerRentOccHous,PctPersOwnOccup,PctPersDenseHous,PctHousLess3BR,MedNumBR,HousVacant,PctHousOccup,PctHousOwnOcc,PctVacantBoarded,PctVacMore6Mos,MedYrHousBuilt,PctHousNoPhone,PctWOFullPlumb,OwnOccLowQuart,OwnOccMedVal,OwnOccHiQuart,RentLowQ,RentMedian,RentHighQ,MedRent,MedRentPctHousInc,MedOwnCostPctInc,MedOwnCostPctIncNoMtg,NumInShelters,NumStreet,PctForeignBorn,PctBornSameState,PctSameHouse85,PctSameCity85,PctSameState85,LemasSwornFT,LemasSwFTPerPop,LemasSwFTFieldOps,LemasSwFTFieldPerPop,LemasTotalReq,LemasTotReqPerPop,PolicReqPerOffic,PolicPerPop,RacialMatchCommPol,PctPolicWhite,PctPolicBlack,PctPolicHisp,PctPolicAsian,PctPolicMinor,OfficAssgnDrugUnits,NumKindsDrugsSeiz,PolicAveOTWorked,LandArea,PopDens,PctUsePubTrans,PolicCars,PolicOperBudg,LemasPctPolicOnPatr,LemasGangUnitDeploy,LemasPctOfficDrugUn,PolicBudgPerPop',
        'state,county,community,communityname,fold,population,householdsize,racepctblack,racePctWhite,racePctAsian,racePctHisp,agePct12t21,agePct12t29,agePct16t24,agePct65up,numbUrban,pctUrban,medIncome,pctWWage,pctWFarmSelf,pctWInvInc,pctWSocSec,pctWPubAsst,pctWRetire,medFamInc,perCapInc,whitePerCap,blackPerCap,indianPerCap,AsianPerCap,OtherPerCap,HispPerCap,NumUnderPov,PctPopUnderPov,PctLess9thGrade,PctNotHSGrad,PctBSorMore,PctUnemployed,PctEmploy,PctEmplManu,PctEmplProfServ,PctOccupManu,PctOccupMgmtProf,MalePctDivorce,MalePctNevMarr,FemalePctDiv,TotalPctDiv,PersPerFam,PctFam2Par,PctKids2Par,PctYoungKids2Par,PctTeen2Par,PctWorkMomYoungKids,PctWorkMom,NumIlleg,PctIlleg,NumImmig,PctImmigRecent,PctImmigRec5,PctImmigRec8,PctImmigRec10,PctRecentImmig,PctRecImmig5,PctRecImmig8,PctRecImmig10,PctSpeakEnglOnly,PctNotSpeakEnglWell,PctLargHouseFam,PctLargHouseOccup,PersPerOccupHous,PersPerOwnOccHous,PersPerRentOccHous,PctPersOwnOccup,PctPersDenseHous,PctHousLess3BR,MedNumBR,HousVacant,PctHousOccup,PctHousOwnOcc,PctVacantBoarded,PctVacMore6Mos,MedYrHousBuilt,PctHousNoPhone,PctWOFullPlumb,OwnOccLowQuart,OwnOccMedVal,OwnOccHiQuart,RentLowQ,RentMedian,RentHighQ,MedRent,MedRentPctHousInc,MedOwnCostPctInc,MedOwnCostPctIncNoMtg,NumInShelters,NumStreet,PctForeignBorn,PctBornSameState,PctSameHouse85,PctSameCity85,PctSameState85,LemasSwornFT,LemasSwFTPerPop,LemasSwFTFieldOps,LemasSwFTFieldPerPop,LemasTotalReq,LemasTotReqPerPop,PolicReqPerOffic,PolicPerPop,RacialMatchCommPol,PctPolicWhite,PctPolicBlack,PctPolicHisp,PctPolicAsian,PctPolicMinor,OfficAssgnDrugUnits,NumKindsDrugsSeiz,PolicAveOTWorked,LandArea,PopDens,PctUsePubTrans,PolicCars,PolicOperBudg,LemasPctPolicOnPatr,LemasGangUnitDeploy,LemasPctOfficDrugUn,PolicBudgPerPop',
        'id',
        'ViolentCrimesPerPop', 0, 'explicit', 10, 0, 0, 1)
    #plpy.execute("DROP TABLE IF EXISTS result_predict_rt_communities;")
    #plpy.info('-----------------------------------the predict_error on training set with pruning-------------------------')
    #rt.__rt_predict(MADlibSchema, 'trained_tree_rt_communities', 'communities_train',
    #    'result_predict_rt_communities', 1)
    #plpy.execute("DROP TABLE IF EXISTS result_predict_rt_communities;")
    #plpy.info('-----------------------------------the predict_error on prediction set with pruning-------------------------')
    #rt.__rt_predict(MADlibSchema, 'trained_tree_rt_communities', 'communities_prune',
    #    'result_predict_rt_communities', 1)

    plpy.info(str(rt.__rt_display(MADlibSchema, 'trained_tree_rt_communities')))


$$ LANGUAGE PLPYTHONU;


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.rt_test_golf
    (
    )
RETURNS TEXT AS $$
    PythonFunctionBodyOnly(`cart', `rt')
    res_train = rt.__rt_train(MADlibSchema, 'const_value', 'golf_rt_test', 'trained_tree_rt',
        'golf_rt_test', 'temperature,humidity', 'outlook,temperature,humidity,windy', 'id',
        'predict_val', 0.01, 'explicit', 10, 0.001, 0.01, 1)
    plpy.info(str(res_train))

    plpy.execute("DROP TABLE IF EXISTS result_predict_rt;")
    res_predict = rt.__rt_predict(MADlibSchema, 'trained_tree_rt', 'golf_rt_test',
        'result_predict_rt', 1)
    plpy.info(str(res_predict))

    display = rt.__rt_display(MADlibSchema, 'trained_tree_rt')
    rt.__rt_clean(MADlibSchema, 'trained_tree_rt')
    return display
$$ LANGUAGE PLPYTHONU;


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.rt_test_r10
    (
    )
RETURNS TEXT AS $$
    PythonFunctionBodyOnly(`cart', `rt')
    res_train = rt.__rt_train(MADlibSchema, 'const_value', 'rt_1000000_10', 'trained_tree_rt_r10',
        None, 'c6,c7,c8,c9,c10', 'd1,d2,d3,d4,d5,c6,c7,c8,c9,c10', 'id',
        'predict_val', 0.01, 'explicit', 10, 0.001, 0.01, 1)
    plpy.info('training time:'+str(res_train.training_time))
    plpy.execute("DROP TABLE IF EXISTS result_predict_rt_r10;")
    res_predict = rt.__rt_predict(MADlibSchema, 'trained_tree_rt_r10', 'rt_1000000_10',
        'result_predict_rt_r10', 1)
    plpy.info('predicting time:'+str(res_predict.prediction_time))

    return rt.__rt_display(MADlibSchema, 'trained_tree_rt_r10')
$$ LANGUAGE PLPYTHONU;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.rt_test
    (
        training_name TEXT,
        min_variance_gain FLOAT8,
        min_node_percent FLOAT8,
        min_split_percent FLOAT8
    )
RETURNS TEXT AS $$
    PythonFunctionBodyOnly(`cart', `rt')
    res_train = rt.__rt_train(MADlibSchema, 'const_value', training_name, 'trained_tree_rt_kddcup',
        None, 
        'duration,src_bytes,dst_bytes,wrong_fragment,urgent,hot,num_failed_logins,num_compromised,'+\
        'root_shell,su_attempted,num_root,num_file_creations,num_shells,num_access_files,num_outbound_cmds'+\
        ',count,srv_count,serror_rate,srv_serror_rate,rerror_rate,srv_rerror_rate,same_srv_rate,'+\
        'diff_srv_rate,srv_diff_host_rate,dst_host_count,dst_host_srv_count,dst_host_same_srv_rate,'+\
        'dst_host_diff_srv_rate,dst_host_same_src_port_rate,dst_host_srv_diff_host_rate,'+\
        'dst_host_serror_rate,dst_host_srv_serror_rate,dst_host_rerror_rate,dst_host_srv_rerror_rate', 
        'duration,src_bytes,dst_bytes,wrong_fragment,urgent,hot,num_failed_logins,num_compromised,' + \
        'root_shell,su_attempted,num_root,num_file_creations,num_shells,num_access_files,num_outbound_cmds,' + \
        'count,srv_count,serror_rate,srv_serror_rate,rerror_rate,srv_rerror_rate,same_srv_rate,diff_srv_rate,' + \
        'srv_diff_host_rate,dst_host_count,dst_host_srv_count,dst_host_same_srv_rate,dst_host_diff_srv_rate,' + \
        'dst_host_same_src_port_rate,dst_host_srv_diff_host_rate,dst_host_serror_rate,dst_host_srv_serror_rate,' + \
        'dst_host_rerror_rate,dst_host_srv_rerror_rate', 'id',
        'predict_val', min_variance_gain, 'explicit', 10, min_node_percent, min_split_percent, 1)
    plpy.info('training time:'+str(res_train.training_time))
    plpy.execute("DROP TABLE IF EXISTS result_predict_rt_kddcup;")
    res_predict = rt.__rt_predict(MADlibSchema, 'trained_tree_rt_kddcup', training_name,
        'result_predict_rt_kddcup', 1)
    plpy.info('predicting time:'+str(res_predict.prediction_time))
    return rt.__rt_display(MADlibSchema, 'trained_tree_rt_kddcup')
$$ LANGUAGE PLPYTHONU;


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.rt_test_madelon
    (
    )
RETURNS TEXT AS $$
    PythonFunctionBodyOnly(`cart', `rt')
    plpy.execute("drop table if exists trained_tree_rt_madelon")
    rt.__rt_train(MADlibSchema, 'const_value','rt_madelon','trained_tree_rt_madelon',
        None,
        'f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,f19,f20,f21,f22,f23,f24,f25,f26,f27,f28,f29,f30,f31,f32,f33,f34,f35,f36,f37,f38,f39,f40,f41,f42,f43,f44,f45,f46,f47,f48,f49,f50,f51,f52,f53,f54,f55,f56,f57,f58,f59,f60,f61,f62,f63,f64,f65,f66,f67,f68,f69,f70,f71,f72,f73,f74,f75,f76,f77,f78,f79,f80,f81,f82,f83,f84,f85,f86,f87,f88,f89,f90,f91,f92,f93,f94,f95,f96,f97,f98,f99,f100,f101,f102,f103,f104,f105,f106,f107,f108,f109,f110,f111,f112,f113,f114,f115,f116,f117,f118,f119,f120,f121,f122,f123,f124,f125,f126,f127,f128,f129,f130,f131,f132,f133,f134,f135,f136,f137,f138,f139,f140,f141,f142,f143,f144,f145,f146,f147,f148,f149,f150,f151,f152,f153,f154,f155,f156,f157,f158,f159,f160,f161,f162,f163,f164,f165,f166,f167,f168,f169,f170,f171,f172,f173,f174,f175,f176,f177,f178,f179,f180,f181,f182,f183,f184,f185,f186,f187,f188,f189,f190,f191,f192,f193,f194,f195,f196,f197,f198,f199,f200,f201,f202,f203,f204,f205,f206,f207,f208,f209,f210,f211,f212,f213,f214,f215,f216,f217,f218,f219,f220,f221,f222,f223,f224,f225,f226,f227,f228,f229,f230,f231,f232,f233,f234,f235,f236,f237,f238,f239,f240,f241,f242,f243,f244,f245,f246,f247,f248,f249,f250,f251,f252,f253,f254,f255,f256,f257,f258,f259,f260,f261,f262,f263,f264,f265,f266,f267,f268,f269,f270,f271,f272,f273,f274,f275,f276,f277,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f357,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f379,f380,f381,f382,f383,f384,f385,f386,f387,f388,f389,f390,f391,f392,f393,f394,f395,f396,f397,f398,f399,f400,f401,f402,f403,f404,f405,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f447,f448,f449,f450,f451,f452,f453,f454,f455,f456,f457,f458,f459,f460,f461,f462,f463,f464,f465,f466,f467,f468,f469,f470,f471,f472,f473,f474,f475,f476,f477,f478,f479,f480,f481,f482,f483,f484,f485,f486,f487,f488,f489,f490,f491,f492,f493,f494,f495,f496,f497,f498,f499,f500',
        None,
        'id','class',0.01,'explicit',10,0,0,1)
    plpy.info(str(rt.__rt_display(MADlibSchema, 'trained_tree_rt_madelon')))
    plpy.execute("drop table if exists rt_result_madelon")
    rt.__rt_predict(MADlibSchema, 'trained_tree_rt_madelon','rt_madelon_test','rt_result_madelon',1)
    plpy.info(str(rt.__caculate_error(MADlibSchema,'rt_result_madelon','rt_result_madelon','class')))

    plpy.execute("drop table if exists trained_tree_rt_madelon")
    rt.__rt_train(MADlibSchema, 'const_value','rt_madelon','trained_tree_rt_madelon',
        'rt_madelon_test',
        'f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,f19,f20,f21,f22,f23,f24,f25,f26,f27,f28,f29,f30,f31,f32,f33,f34,f35,f36,f37,f38,f39,f40,f41,f42,f43,f44,f45,f46,f47,f48,f49,f50,f51,f52,f53,f54,f55,f56,f57,f58,f59,f60,f61,f62,f63,f64,f65,f66,f67,f68,f69,f70,f71,f72,f73,f74,f75,f76,f77,f78,f79,f80,f81,f82,f83,f84,f85,f86,f87,f88,f89,f90,f91,f92,f93,f94,f95,f96,f97,f98,f99,f100,f101,f102,f103,f104,f105,f106,f107,f108,f109,f110,f111,f112,f113,f114,f115,f116,f117,f118,f119,f120,f121,f122,f123,f124,f125,f126,f127,f128,f129,f130,f131,f132,f133,f134,f135,f136,f137,f138,f139,f140,f141,f142,f143,f144,f145,f146,f147,f148,f149,f150,f151,f152,f153,f154,f155,f156,f157,f158,f159,f160,f161,f162,f163,f164,f165,f166,f167,f168,f169,f170,f171,f172,f173,f174,f175,f176,f177,f178,f179,f180,f181,f182,f183,f184,f185,f186,f187,f188,f189,f190,f191,f192,f193,f194,f195,f196,f197,f198,f199,f200,f201,f202,f203,f204,f205,f206,f207,f208,f209,f210,f211,f212,f213,f214,f215,f216,f217,f218,f219,f220,f221,f222,f223,f224,f225,f226,f227,f228,f229,f230,f231,f232,f233,f234,f235,f236,f237,f238,f239,f240,f241,f242,f243,f244,f245,f246,f247,f248,f249,f250,f251,f252,f253,f254,f255,f256,f257,f258,f259,f260,f261,f262,f263,f264,f265,f266,f267,f268,f269,f270,f271,f272,f273,f274,f275,f276,f277,f278,f279,f280,f281,f282,f283,f284,f285,f286,f287,f288,f289,f290,f291,f292,f293,f294,f295,f296,f297,f298,f299,f300,f301,f302,f303,f304,f305,f306,f307,f308,f309,f310,f311,f312,f313,f314,f315,f316,f317,f318,f319,f320,f321,f322,f323,f324,f325,f326,f327,f328,f329,f330,f331,f332,f333,f334,f335,f336,f337,f338,f339,f340,f341,f342,f343,f344,f345,f346,f347,f348,f349,f350,f351,f352,f353,f354,f355,f356,f357,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f370,f371,f372,f373,f374,f375,f376,f377,f378,f379,f380,f381,f382,f383,f384,f385,f386,f387,f388,f389,f390,f391,f392,f393,f394,f395,f396,f397,f398,f399,f400,f401,f402,f403,f404,f405,f406,f407,f408,f409,f410,f411,f412,f413,f414,f415,f416,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f435,f436,f437,f438,f439,f440,f441,f442,f443,f444,f445,f446,f447,f448,f449,f450,f451,f452,f453,f454,f455,f456,f457,f458,f459,f460,f461,f462,f463,f464,f465,f466,f467,f468,f469,f470,f471,f472,f473,f474,f475,f476,f477,f478,f479,f480,f481,f482,f483,f484,f485,f486,f487,f488,f489,f490,f491,f492,f493,f494,f495,f496,f497,f498,f499,f500',
        None,
        'id','class',0.01,'explicit',10,0,0,1)
    plpy.info(str(rt.__rt_display(MADlibSchema, 'trained_tree_rt_madelon')))
    plpy.execute("drop table if exists rt_result_madelon")
    rt.__rt_predict(MADlibSchema, 'trained_tree_rt_madelon','rt_madelon_test','rt_result_madelon',1)
    plpy.info(str(rt.__caculate_error(MADlibSchema,'rt_result_madelon','rt_result_madelon','class')))

$$ LANGUAGE PLPYTHONU;
